setwd("~/gits/riskRegression")
devtools::document()
install.packages(c("party", "penalized", "smcfcs", "SuperLearner"))
devtools::document()
install.packages("mets")
devtools::document()
devtools::document()
devtools::check()
?devtools::check()
?devtools::check(vignettes = FALSE)
devtools::check(vignettes = FALSE)
install.packages("pec")
install.packages("randomForestSRC")
install.packages("mstate")
install.packages("ipw")
?test_that
devtools::load_all()
setwd("~/gits/riskRegression")
devtools::load_all()
devtools::load_all()
# Simulate censored survival data for two outcome types from exponential distributions
library(data.table)
library(casebase)
library(survival)
#library(riskRegression)
library(prodlim)
# event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# X1:X5 are binary covariates
# X6:X10 are continuous covariates
nobs <- 200
set.seed(12345)
## DT <- sampleData(nobs, outcome = "competing.risk")
DT <- sampleData(nobs, outcome = "survival")
tlim <- 12
DT[time >= tlim, `:=`("event" = 0, "time" = tlim)]
simple_linear <- fitSmoothHazard(event ~ time + X1, DT)
multiple_linear <- fitSmoothHazard(event ~ time + X1 + X6 + X7, DT)
class(simple_linear) <- c("singleEventCB",class(simple_linear))
class(multiple_linear) <- c("singleEventCB",class(multiple_linear))
# compare prediction performance on a test set
set.seed(8)
testDT <- sampleData(130, outcome = "survival")
x <- Score(list("Simple, linear" = simple_linear, "Multiple, linear" = multiple_linear, "Cox" = coxfit),
data = testDT, # data for evaluation
formula = Hist(time, event) ~ 1, # used to communicate the outcome variables
# and which variables affect censoring
cause = 1, # cause of interest
times = 5
) # evaluation time point
coxfit <- coxph(Surv(time, event != 0) ~ X1+X6+X7, data = DT, x = TRUE)
# compare prediction performance on a test set
set.seed(8)
testDT <- sampleData(130, outcome = "survival")
x <- Score(list("Simple, linear" = simple_linear, "Multiple, linear" = multiple_linear, "Cox" = coxfit),
data = testDT, # data for evaluation
formula = Hist(time, event) ~ 1, # used to communicate the outcome variables
# and which variables affect censoring
cause = 1, # cause of interest
times = 5
) # evaluation time point
x
devtools::check()
devtools::check(vignettes=FALSE)
install.packages("R.rsp")
install.packages("pROC")
install.packages("randomForest")
devtools::document()
devtools::check()
warnings()
notes()
# Simulate censored survival data for two outcome types from exponential distributions
library(data.table)
library(casebase)
library(survival)
#library(riskRegression)
library(prodlim)
# event type 0-censored, 1-event of interest, 2-competing event
# t observed time/endpoint
# X1:X5 are binary covariates
# X6:X10 are continuous covariates
nobs <- 200
set.seed(12345)
### Using the same data, make it single event
### This way, we can debug using the faster prediction algorithm!
## DT <- sampleData(nobs, outcome = "competing.risk")
DT <- sampleData(nobs, outcome = "survival")
tlim <- 12
DT[time >= tlim, `:=`("event" = 0, "time" = tlim)]
simple_linear <- fitSmoothHazard(event ~ time + X1, DT)
multiple_linear <- fitSmoothHazard(event ~ time + X1 + X6 + X7, DT)
class(simple_linear) <- c("singleEventCB",class(simple_linear))
class(multiple_linear) <- c("singleEventCB",class(multiple_linear))
coxfit <- coxph(Surv(time, event != 0) ~ X1+X6+X7, data = DT, x = TRUE)
# compare prediction performance on a test set
set.seed(8)
testDT <- sampleData(130, outcome = "survival")
x <- Score(list("Simple, linear" = simple_linear, "Multiple, linear" = multiple_linear, "Cox" = coxfit),
data = testDT, # data for evaluation
formula = Hist(time, event) ~ 1, # used to communicate the outcome variables
# and which variables affect censoring
cause = 1, # cause of interest
times = 5
) # evaluation time point
x
pacman::p_install_gh("Jesse-Islam/riskRegression")
library(riskRegression)
